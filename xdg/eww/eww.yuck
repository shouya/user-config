(include "./combinator.yuck")

(deflisten date :initial "{}" `./scripts/clock.sh`)

(deflisten workspaces
    ;; so it doesn't spit out a long
    ;; error every time I reload
    :initial "[{},{},{},{},{},{},{},{},{},{}]"
    `./scripts/workspaces.sh`)

(deflisten current-workspace
    :initial "0"
    `xprop -spy -root _NET_CURRENT_DESKTOP`)

(deflisten network-speed
    :initial "{}"
    `./scripts/net.sh wlp0s20f3`)
(deflisten wifi
    :initial '{"ssid": "", "addr": "", "freq": ""}'
    `./scripts/wifi.sh wlp0s20f3`)
;; (defvar wifi '{"ssid": "", "addr": "", "freq": ""}')

(defpoll load-avg
    :interval "1s"
    "uptime | awk '{print $10 $11 $12}'")

(deflisten active-window-title
    `./scripts/active-window-title.sh`)

(defpoll cpu
    :interval "1s"
    :initial "{}"
    `./scripts/cpu.sh run`)

(defpoll battery
    :interval "5s"
    :initial "[{},{}]"
    `./scripts/battery.sh`)

(defwidget sep []
  (label :yalign "0"  :class "sep" :text "|"))

(defwidget xmonad-workspace-button [entry]
  (eventbox
   :cursor "hand"
   ;; :visible {entry.current || entry.visible || entry.hidden}
   :class "ws ws-curr-${entry.current} ws-vis-${entry.visible} ws-hid-${entry.hidden} ws-urg-${entry.urgent} ws-name-${entry.name}"
   :onclick "wmctrl -s ${entry.index}"
   :width 12
   :height 30
   {entry.name}))

(defwidget xmonad-ws-switcher []
  (box
   :class "workspaces"
   :spacing 2
   :space-evenly false
   :width 100
   :valign "baseline"
   (xmonad-workspace-button :entry {workspaces[0]})
   (xmonad-workspace-button :entry {workspaces[1]})
   (xmonad-workspace-button :entry {workspaces[2]})
   (xmonad-workspace-button :entry {workspaces[3]})
   (xmonad-workspace-button :entry {workspaces[4]})
   (xmonad-workspace-button :entry {workspaces[5]})
   (xmonad-workspace-button :entry {workspaces[6]})
   (xmonad-workspace-button :entry {workspaces[7]})
   (xmonad-workspace-button :entry {workspaces[8]})
   ))

(defwidget xmonad-active-window-title [max-len]
  (fix-sized
   :width 600
   (label
    :class "active-window-title"
    :visible { active-window-title != "" }
    :text active-window-title
    :show-truncated true
    :limit-width max-len
    :xalign "0"
    :wrap false
    :tooltip {strlength(active-window-title) > max-len ? active-window-title : ""}
    ))
  )

(defwidget left []
  (box
   :spacing 10
   :space-evenly false
   :valign "center"
   :hexpand true
   :visible {arraylength(workspaces) > 1}
   (xmonad-ws-switcher)
   (xmonad-active-window-title :max-len 100)))

(defwidget clock []
  (box
   (label
    :class "clock"
    :text {date.short}
    :tooltip {date.long}
    )))

(defvar cpu-reveal false)

(defwidget cpu-widget []
  (cpu-circular
   :class "cpu"
   :level {cpu.load_level}
   :percent { (cpu.load ?: 1.0) / 10.0 * 100.0 }
   :value {cpu.load}
   :revealer-var cpu-reveal
   :revealer-var-name "cpu-reveal"
   :freq {cpu.freq}
   ))

(defwidget network-widget [device]
  (box
   :space-evenly false
   (label :visible {wifi.ssid != ""}
          :text "${network-speed.tx}⇅${network-speed.rx}"
          :tooltip "Connected to ${wifi.ssid} (${wifi.freq})
${wifi.addr}
${wifi.signal}"
          )
   (label :visible {wifi.ssid == ""}
          :text "Disconnected")))

(defwidget cpu-circular
    [class level percent freq ?value revealer-var revealer-var-name]
    (revealer-on-hover
     :var revealer-var
     :var-name revealer-var-name
     :class "monitor ${class} ${level} cpu-${level}"

     (box
      :space-evenly false
      :width 70

      (circular-progress
       :width 30
       :value {percent > 100 ? 100 : percent}
       :start-at 75
       :thickness 5
       (label :text "${round(value ?: percent,1)}"))
      (box
       :orientation "v"
       :style "font-size: 0.7em; margin: -2px 0; "
       (label :style "margin-bottom: -2px;"
              :text "${EWW_TEMPS.CORETEMP_CORE_0}℃")
       (label :style "margin-top: -2px;"
              :text "${freq}"))
      )
     (graph :value percent
            :min 0
            :max 100
            :time-range "30s"
            :width 40
            :thickness 2
            :tooltip "Load: ${load-avg}, ${freq}, ${EWW_TEMPS.CORETEMP_CORE_0}℃"
            )))


(defwidget battery-widget [name index reveal-var reveal-var-name]
           (battery-circular
            :class "battery"
            :name name
            :level { (battery[index]?.capacity ?: 0) > 80 ? "ok" :
            (battery[index]?.capacity ?: 0) > 40 ? "warn" : "alert" }
            :percent { battery[index]?.capacity ?: 0 }
            :value { battery[index]?.capacity >= 95 ? "F" :
            "${battery[index]?.capacity}" }
            :revealer-var reveal-var
            :revealer-var-name reveal-var-name
            :battery-status "${battery[index]?.rate}"
            ))

(defwidget battery-circular
    [name class level percent battery-status ?value revealer-var revealer-var-name]
    (box
     ;; :var revealer-var
     ;; :var-name revealer-var-name
     :class "monitor ${class} ${level} battery-${level}"

     (circular-progress
      :width 30
      :value percent
      :start-at 75
      :thickness 5
      :tooltip "${name}: ${battery-status}"
      (label :text "${value ?: percent}"))
     ))

(defvar battery-reveal false)
(defvar battery-reveal-hid false)

(defwidget monitors []
  (box
   :space-evenly false
   :orientation "h"
   (cpu-widget)
   (battery-widget :name "Laptop battery"
                   :index 0
                   :reveal-var battery-reveal
                   :reveal-var-name "battery-reveal")
   (revealer
    :reveal false
    :transition "slideright"
    (battery-widget :name "HID battery"
                    :index 1
                    :reveal-var battery-reveal-hid
                    :reveal-var-name "battery-reveal-hid"
                    ))
   ))


(defwidget right []
  (box
   :space-evenly false
   (network-widget :device "wlp0s20f3")
   (sep)
   (monitors)
   (sep)
   (clock)))

(defwidget main []
  (box
   :class "main"
   :space-evenly false
   (left)
   (right)))


(defwindow main-window
    :stacking "fg"
    :windowtype "dock"
    :reserve (struts :distance "60" :side "top")
    :geometry (geometry :width "60%"
                        :height "30px"
                        :y "2"
                        :anchor "top center")
    (main))
