;; -*- lisp -*-
(include "./combinator.yuck")

;; (defvar monitor "eDP-1")

(deflisten date :initial "{}" `./scripts/clock.py`)

(deflisten workspaces
    ;; so it doesn't spit out a long
    ;; error every time I reload
    :initial "[{},{},{},{},{},{},{},{},{},{}]"
    `./scripts/workspaces.sh`)

(deflisten current-workspace
    :initial "0"
    `xprop -spy -root _NET_CURRENT_DESKTOP`)
(deflisten cpu :initial "{}" `./scripts/cpu.py run_forever`)

(deflisten network-speed :initial "{}" `./scripts/net.py wlp9s0`)
(deflisten wifi
    :initial '{"ssid": "", "addr": "", "freq": ""}'
    `./scripts/wifi.sh`)
(deflisten khal
    :initial '{"min_left": 0, "name": "", "redacted": false, "done": false, "upcoming": false}'
    `./scripts/khal.py`)

(deflisten battery
    :initial '{"status": "unknown"}'
    `batry`)

(defpoll khal-today :initial "" :interval "1m" `khal list today`)
(deflisten active-window-title `./scripts/active-window-title.py`)
(defpoll calendar :interval "1m" `cal -3`)
(deflisten wake-guard :initial '{"active":false,"mode":null,"remaining_seconds":null,"message":""}' `wake-guard monitor`)

(defwidget sep [] (label :yalign "0"  :class "sep" :text "|"))

(defwidget icon [text]
  (overlay
   (box :width 24 :height 24)
   (label :class "icon" :text text)))


(defwidget xmonad-workspace-button [entry]
  (eventbox
   :cursor "hand"
   ;; :visible {entry.current || entry.visible || entry.hidden}
   :class "ws ws-curr-${entry.current} ws-vis-${entry.visible} ws-hid-${entry.hidden} ws-urg-${entry.urgent} ws-name-${entry.name}"
   :onclick "wmctrl -s ${entry.index}"
   :width 12
   :height 30
   {entry.name}))

(defwidget xmonad-ws-switcher []
  (box
   :class "workspaces"
   :spacing 2
   :space-evenly false
   :width 100
   :valign "baseline"
   (xmonad-workspace-button :entry {workspaces[0]})
   (xmonad-workspace-button :entry {workspaces[1]})
   (xmonad-workspace-button :entry {workspaces[2]})
   (xmonad-workspace-button :entry {workspaces[3]})
   (xmonad-workspace-button :entry {workspaces[4]})
   (xmonad-workspace-button :entry {workspaces[5]})
   (xmonad-workspace-button :entry {workspaces[6]})
   (xmonad-workspace-button :entry {workspaces[7]})
   (xmonad-workspace-button :entry {workspaces[8]})
   ))

(defwidget xmonad-active-window-title [max-len]
  (fix-sized
   :width 600
   (label
    :class "active-window-title"
    :visible { active-window-title != "" }
    :text active-window-title
    :show-truncated true
    :limit-width max-len
    :xalign "0"
    :wrap false
    :tooltip {strlength(active-window-title) > max-len ? active-window-title : ""}
    ))
  )

(defwidget left []
  (box
   :spacing 10
   :space-evenly false
   :valign "center"
   :hexpand true
   :visible {arraylength(workspaces) > 1}
   (xmonad-ws-switcher)
   (xmonad-active-window-title :max-len 100)))

(defwidget clock []
  (tooltip
   (date-time-detail)
   (label :class "clock" :text {date.short})))

(defvar cpu-reveal false)

(defwidget cpu-widget []
  (cpu-circular
   :class "cpu"
   :level {cpu.load_level}
   :percent { (cpu.load ?: 1.0) / 10.0 * 100.0 }
   :value {cpu.load}
   :revealer-var cpu-reveal
   :revealer-var-name "cpu-reveal"
   :freq {cpu.freq}
   :temp {cpu.temp}
   ))

(defwidget network-widget []
  (box
   :space-evenly false
   (label :visible {wifi.ssid != ""}
          :text "${network-speed.tx}⇅${network-speed.rx}"
          :tooltip "Connected to ${wifi.ssid} (${wifi.freq})
${wifi.addr}
${wifi.signal}"
          )
   (label :visible {wifi.ssid == ""}
          :text "Disconnected")))

(defwidget cpu-circular
    [class level percent freq temp ?value revealer-var revealer-var-name]
    (box
     :space-evenly false
     :width 70
     :class "monitor ${class} ${level} cpu-${level}"
     (circular-progress
      :width 30
      :value {percent > 100 ? 100 : percent}
      :start-at 75
      :thickness 5
      (label :text "${round(value ?: percent,1)}")
      )
     (box
      :orientation "v"
      :style "font-size: 0.7em; margin: -2px 0; "
      (label :style "margin-bottom: -2px;"
             :text "${temp}℃")
      (label :style "margin-top: -2px;"
             :text "${freq}"))
     ))

(defwidget battery-icon [percent]
  (icon :text { percent > 85 ? "" :
                percent > 60 ? "" :
                percent > 30 ? "" :
                percent > 10 ? "" : "" }))

(defwidget battery-charging [bat]
  (box
   :space-evenly false
   :class "battery"
   :visible {bat.status != "discharging"}
   (overlay
    (box
     :class { (bat.percentage ?: 100) < 80 ? "icon-charging" : "icon-full" }
     (icon :text ""))
    (label :visible {(bat.percentage ?: 100) < 80}
           :class "percentage"
           :text "${bat.percentage}"))
   (box
    :visible {bat.status == "charging" }
    :orientation "v"
    :style "font-size: 0.7em; margin: -2px 0;"
    (label :style "margin-bottom: -2px;"
           :text "${bat.wattage}W")
    (label :style "margin-top: -2px;"
           :text "~${bat.time_to_full}"
           ))))

(defwidget battery-discharging [bat]
  (box
   :space-evenly false
   :class { (bat.percentage ?: 100) < 40 ? 'battery-warn' :
            (bat.percentage ?: 100) < 10 ? 'battery-alert' : '' }
            :visible {bat.status == "discharging"}
            (overlay
             (box :class "icon-discharging"
                  (battery-icon :percent {bat.percentage ?: 100 }))
             (label :class "percentage"
                    :text "${bat.percentage}"))
   (box
    :orientation "v"
    :style "font-size: 0.7em; margin: -2px 0;"
    (label :style "margin-bottom: -2px;"
           :text "${bat.wattage}W")
    (label :style "margin-top: -2px;"
           :text "~${bat.time_to_empty}"
           )))
  )

(defwidget battery-widget [bat]
  (eventbox
   :class "battery"
   (box
    (battery-discharging :bat bat)
    (battery-charging :bat bat))
   ))

(defvar battery-reveal false)
(defvar battery-reveal-hid false)

(defwidget monitors []
  (box
   :space-evenly false
   :orientation "h"
   (cpu-widget)
   (box
    :visible {battery.status != "unknown"}
    (battery-widget :bat battery))
   ))

(defvar khal-reveal false)

(defwidget khal-widget []
  (tooltip
   (khal-detail)
   (eventbox
    :onclick "xdotool key 'super+F4'"
    :cursor "hand"
    :class "khal"
    :visible {!khal.redacted}
    (box
     :space-evenly false
     :valign "baseline"
     :width 30
     (revealer
      :reveal {khal.done}
      :transition "slideright"
      (label :text "Done for today!"))
     (revealer
      :reveal {!khal.done}
      :transition "slideright"
      :class {khal.upcoming ? "upcoming" : "ongoing" }
      (box
       :space-evenly false
       (label :text "${khal.name}")
       (label
        :style "font-size: .8em; margin-left: 6px;"
        :text "(${khal.min_left}m)")
       ))
     (sep)))))

(defwidget util-toggle
    [icon ?icon-off enabled enable-var-name tooltip curr on off]
    (overlay
     (eventbox :class { enabled ? "toggle-enabled" : "toggle-disabled" }
               :tooltip tooltip
               :cursor "hand"
               :onclick { enabled
                          ? "( ${off} ); eww update ${enable-var-name}=$(${curr})"
                          : "( ${on} ); eww update ${enable-var-name}=$(${curr})" }
               (icon :text { enabled ? icon : (icon-off ?: icon) }))
     ))


(defpoll dunst-enabled
    :initial "false"
    :interval "10m"
    "test `dunstctl is-paused` = true && echo false || echo true" )

(defwidget dunst-toggle []
  (util-toggle
   :icon ""
   :icon-off ""
   :tooltip { dunst-enabled ? "Notifications enabled" : "Notifications disabled" }
   :enabled dunst-enabled
   :enable-var-name "dunst-enabled"
   :curr "test $(dunstctl is-paused) = true && echo false || echo true"
   :on "dunstctl set-paused false"
   :off "dunstctl set-paused true")
  )

(defwidget wake-guard-toggle-tooltip []
  (box
   :orientation "v"
   :space-evenly false
   (label :xalign 0 :text "Left-click: toggle mode")
   (label :xalign 0 :text "Middle-click: screen-off")
   (label :xalign 0 :text "Right-click: suspend")
   (label :xalign 0 :text "Scroll: wake guard")))


(defwidget wake-guard-toggle []
  (tooltip
   (wake-guard-toggle-tooltip)
   (eventbox
    :cursor "hand"
    :onclick { wake-guard.mode=="null" ? "wake-guard msg -m idle +15m" :
               wake-guard.mode=="sleep" ? "wake-guard msg -m idle +0s" :
               wake-guard.mode=="idle" ? "wake-guard msg -m sleep +0s" : "" }
    :onmiddleclick "(notify-send 'Display off in 2 secs'; sleep 2; xset dpms force off) &"
    :onrightclick "(notify-send 'Suspending in 2 secs'; sleep 2; systemctl suspend) &"
    :onscroll "test {} = up && wake-guard msg +15m || wake-guard msg -15m"
    :class { wake-guard.active ? "toggle-enabled" : "toggle-disabled" }
    (box :space-evenly false
         (box :visible {wake-guard.mode=="null"}
              (icon :text "󰒲"))
         (box :visible {wake-guard.mode=="sleep"}
              (icon :text "󰒳"))
         (box :visible {wake-guard.mode=="idle"}
              (icon :text "󰈉"))
         (label :visible {wake-guard.mode!="null"} :text "${wake-guard.mode}")
         (label :visible {wake-guard.message!=""} :text "/${wake-guard.message}")))))

(defvar util-reveal false)
(defvar util-stick true)

(defwidget util-switches []
  (eventbox
   :onhover "eww update util-reveal=true"
   :onhoverlost "eww update util-reveal=false"
   :class { util-stick ? "toggle-enabled" : "toggle-disabled" }
   (box
    :space-evenly false
    (revealer
     :reveal {util-stick || util-reveal || wake-guard.active}
     :duration "200ms"
     :transition "slideright"
     (box :space-evenly false
          (dunst-toggle)
          (wake-guard-toggle)
          ))
    (eventbox
     :onclick "eww update util-stick=${!util-stick}"
     :cursor "hand"
     (icon :text "")))))

(defvar tray-reveal false)
(defvar tray-stick false)

(defwidget tray-switches []
  (eventbox
   :onhover "eww update tray-reveal=true"
   :onhoverlost "eww update tray-reveal=false"
   :class { tray-stick ? "toggle-enabled" : "toggle-disabled" }
   (box
    :space-evenly false
    (revealer
     :reveal {tray-stick || tray-reveal}
     :duration "200ms"
     :transition "slideright"
     (systray
      :icon-size 20
      :space-evenly false
      :spacing 2))
    (eventbox
     :onclick "eww update tray-stick=${!tray-stick}"
     :cursor "hand"
     (icon :text "")))))

(defwidget right []
  (box
   :space-evenly false
   (khal-widget)
   (network-widget)
   (sep)
   (monitors)
   (sep)
   (util-switches)
   (sep)
   (tray-switches)
   (sep)
   (clock)
   ))

(defwidget main []
  (box
   :class "main"
   :space-evenly false
   (left)
   (right)
   ))


(defwindow main-window
    :monitor "eDP-1"
    :stacking "fg"
    :windowtype "dock"
    :reserve (struts :distance "68" :side "top")
    :geometry (geometry :width "90%"
                        :height "30px"
                        :y "2"
                        :anchor "top center")
    (main))

(defwidget textual-detail [text ?wrap]
           (box
            :style "margin: 20px"
            :valign "start"
            (label :style "font-family: monospace; font-size: 0.8em;"
                   :text text
                   :wrap {wrap ?: false})))


(defwidget khal-detail []
  (textual-detail
   :text { khal-today == "" ? "No tasks today!" : "${khal-today}"}))

(defwidget date-time-detail []
  (textual-detail
   :text calendar
   :wrap false))

;; Local Variables:
;; apheleia-inhibit: t
;; End:
